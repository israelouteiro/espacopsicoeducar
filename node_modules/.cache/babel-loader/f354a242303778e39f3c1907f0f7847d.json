{"ast":null,"code":"import { ReadObject, SaveObject } from './storage';\nexport const DEVELOPMENT_MODE = true;\nexport const API_ENDPOINT = 'https://boilerplate.xapps-staging.com/';\nexport const GetHeaders = async authenticated => {\n  const headers = {\n    'Content-Type': 'application/json'\n  };\n  const authentication = await ReadObject('authentication');\n\n  if (authenticated && authentication.jwt) {\n    headers.Authorization = `Bearer ${authentication.jwt}`;\n  }\n\n  return {\n    headers\n  };\n};\n_c = GetHeaders;\nexport const ServerFetch = async (url, options, authenticated) => {\n  const {\n    headers\n  } = await GetHeaders(authenticated); // console.info(url, options, headers)\n\n  try {\n    const response = await fetch(url, { ...options,\n      headers\n    });\n\n    if (response.statusCode === 403 && authenticated) {\n      await SaveObject('authentication', {});\n    }\n\n    try {\n      return await response.json();\n    } catch (err) {\n      console.log('ServerParseError', err);\n      return response;\n    }\n  } catch (error) {\n    console.log('ServerFetchError', error);\n    return false;\n  }\n};\n_c2 = ServerFetch;\nexport const GET = async function (path) {\n  let authenticated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return await ServerFetch(`${API_ENDPOINT}${path}`, {\n    method: 'GET'\n  }, authenticated);\n};\n_c3 = GET;\nexport const POST = async function (path, body) {\n  let authenticated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return await ServerFetch(`${API_ENDPOINT}${path}`, {\n    method: 'POST',\n    body: JSON.stringify(body)\n  }, authenticated);\n};\n_c4 = POST;\nexport const PUT = async function (path, body) {\n  let authenticated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return await ServerFetch(`${API_ENDPOINT}${path}`, {\n    method: 'PUT',\n    body: JSON.stringify(body)\n  }, authenticated);\n};\n_c5 = PUT;\nexport const DELETE = async function (path) {\n  let authenticated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return await ServerFetch(`${API_ENDPOINT}${path}`, {\n    method: 'DELETE'\n  }, authenticated);\n};\n_c6 = DELETE;\nexport const ReadAddressesByZipCode = async zipCode => {\n  try {\n    let result = await fetch(`https://viacep.com.br/ws/${zipCode}/json/`);\n    return result.json();\n  } catch (err) {\n    return false;\n  }\n};\n_c7 = ReadAddressesByZipCode;\nexport const PostImage = async fileToUpload => {\n  const formData = new FormData();\n  formData.append('file', fileToUpload, fileToUpload.name);\n  let {\n    headers\n  } = await GetHeaders(true);\n  delete headers['Content-Type'];\n  let response = await fetch(`${API_ENDPOINT}/upload`, {\n    method: 'POST',\n    body: formData,\n    headers\n  });\n  let responseJson = await response.json();\n  return responseJson;\n};\n_c8 = PostImage;\nexport const PrepareImageFile = image => {\n  let btc = window.atob(image.source);\n  let btn = new Array(btc.length);\n\n  for (var i = 0; i < btc.length; i++) {\n    btn[i] = btc.charCodeAt(i);\n  }\n\n  var bta = new Uint8Array(btn);\n  let boobs = new Blob([bta], {\n    type: 'image/png'\n  });\n  return new File([boobs], `${image.filename}`);\n};\n_c9 = PrepareImageFile;\nexport const UploadImage = file => {\n  return new Promise((resolve, reject) => {\n    let reader = new FileReader();\n\n    reader.onload = async () => {\n      let source = `${reader.result}`.split(',')[1];\n      let image = {\n        filename: file.name,\n        filetype: file.type,\n        source\n      };\n      let thefile = PrepareImageFile(image);\n      let result = await PostImage(thefile);\n      resolve(result);\n    };\n\n    reader.readAsDataURL(file);\n  });\n};\n_c10 = UploadImage;\nexport const parseStrapiImage = url => {\n  return !url ? '' : url.indexOf('://') !== -1 ? url : `${API_ENDPOINT.replace('/api', '')}${url}`;\n};\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10;\n\n$RefreshReg$(_c, \"GetHeaders\");\n$RefreshReg$(_c2, \"ServerFetch\");\n$RefreshReg$(_c3, \"GET\");\n$RefreshReg$(_c4, \"POST\");\n$RefreshReg$(_c5, \"PUT\");\n$RefreshReg$(_c6, \"DELETE\");\n$RefreshReg$(_c7, \"ReadAddressesByZipCode\");\n$RefreshReg$(_c8, \"PostImage\");\n$RefreshReg$(_c9, \"PrepareImageFile\");\n$RefreshReg$(_c10, \"UploadImage\");","map":{"version":3,"sources":["/Users/israelouteiro/Desktop/EspacoPsicoEducar/src/services/api.js"],"names":["ReadObject","SaveObject","DEVELOPMENT_MODE","API_ENDPOINT","GetHeaders","authenticated","headers","authentication","jwt","Authorization","ServerFetch","url","options","response","fetch","statusCode","json","err","console","log","error","GET","path","method","POST","body","JSON","stringify","PUT","DELETE","ReadAddressesByZipCode","zipCode","result","PostImage","fileToUpload","formData","FormData","append","name","responseJson","PrepareImageFile","image","btc","window","atob","source","btn","Array","length","i","charCodeAt","bta","Uint8Array","boobs","Blob","type","File","filename","UploadImage","file","Promise","resolve","reject","reader","FileReader","onload","split","filetype","thefile","readAsDataURL","parseStrapiImage","indexOf","replace"],"mappings":"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","sourcesContent":["import { ReadObject, SaveObject } from './storage'\n\nexport const DEVELOPMENT_MODE = true \nexport const API_ENDPOINT ='https://boilerplate.xapps-staging.com/'\n\nexport const GetHeaders = async authenticated => {\n\tconst headers = { 'Content-Type': 'application/json' }\n\tconst authentication = await ReadObject('authentication')\n\tif (authenticated && authentication.jwt) {\n\t\theaders.Authorization = `Bearer ${authentication.jwt}`\n\t}\n\treturn { headers }\n}\n\nexport const ServerFetch = async (url, options, authenticated) => {\n\tconst { headers } = await GetHeaders(authenticated)\n\t// console.info(url, options, headers)\n\ttry{\n\t\tconst response = await fetch(url, { ...options, headers }) \n\t\tif (response.statusCode === 403 && authenticated) {\n\t\t\tawait SaveObject('authentication', {})\n\t\t}\n\t\ttry{\n\t\t\treturn await response.json()\n\t\t}catch(err){\n\t\t\tconsole.log('ServerParseError', err)\n\t\t\treturn response\n\t\t}  \n\t}catch(error){\n\t\tconsole.log('ServerFetchError', error)\n\t\treturn false;\n\t}\n}\n\nexport const GET = async (path, authenticated = false) => {\n\treturn await ServerFetch(\n\t\t`${API_ENDPOINT}${path}`,\n\t\t{\n\t\t\tmethod: 'GET'\n\t\t},\n\t\tauthenticated\n\t)\n}\n\nexport const POST = async (path, body, authenticated = false) => {\n\treturn await ServerFetch(\n\t\t`${API_ENDPOINT}${path}`,\n\t\t{\n\t\t\tmethod: 'POST',\n\t\t\tbody: JSON.stringify(body)\n\t\t},\n\t\tauthenticated\n\t)\n}\n\nexport const PUT = async (path, body, authenticated = false) => {\n\treturn await ServerFetch(\n\t\t`${API_ENDPOINT}${path}`,\n\t\t{\n\t\t\tmethod: 'PUT',\n\t\t\tbody: JSON.stringify(body)\n\t\t},\n\t\tauthenticated\n\t)\n}\n\nexport const DELETE = async (path, authenticated = false) => {\n\treturn await ServerFetch(\n\t\t`${API_ENDPOINT}${path}`,\n\t\t{\n\t\t\tmethod: 'DELETE'\n\t\t},\n\t\tauthenticated\n\t)\n} \n\nexport const ReadAddressesByZipCode = async (zipCode) => {\n    try{\n        let result = await fetch(`https://viacep.com.br/ws/${ zipCode }/json/`);\n        return result.json();\n    }catch(err){ return false; }\n}\n\n\n\nexport const PostImage = async (fileToUpload) => {\n    const formData = new FormData()\n    formData.append('file', fileToUpload, fileToUpload.name)  \n    let { headers } = await GetHeaders(true) \n    delete headers['Content-Type']\n    let response = await fetch(`${API_ENDPOINT}/upload`, { method: 'POST', body: formData, headers });   \n    let responseJson = await response.json()  \n    return responseJson; \n}\n  \nexport const PrepareImageFile = (image) => {\n\tlet btc = window.atob(image.source)\n\tlet btn = new Array(btc.length);\n\tfor (var i = 0; i < btc.length; i++) {\n\t\tbtn[i] = btc.charCodeAt(i);\n\t}\n\tvar bta = new Uint8Array(btn);\n\tlet boobs = new Blob([bta], {type: 'image/png' } );\n\treturn new File([boobs], `${ image.filename }`)\n} \n\nexport const UploadImage = (file) => {\n\treturn new Promise((resolve, reject) => { \n\t\tlet reader = new FileReader();\n\t\treader.onload = async () => {\n\t\t\tlet source = `${ reader.result }`.split(',')[1]\n\t\t\tlet image = {\n\t\t\t\tfilename: file.name,\n\t\t\t\tfiletype: file.type,\n\t\t\t\tsource\n\t\t\t}\n\t\t\tlet thefile = PrepareImageFile(image);\n\t\t\tlet result = await PostImage(thefile);\n\n\t\t\tresolve(result);\n\t\t};\n\t\treader.readAsDataURL(file);\n\t})\n} \n \nexport const parseStrapiImage = url => {\n    return !url ? '' : url.indexOf('://') !== -1 ? url : `${API_ENDPOINT.replace('/api', '')}${url}`\n}"]},"metadata":{},"sourceType":"module"}